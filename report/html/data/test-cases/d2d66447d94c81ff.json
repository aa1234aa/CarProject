{
  "uid" : "d2d66447d94c81ff",
  "name" : "test_car_terminal_model",
  "fullName" : "testcase.test_new_car.TestAuditArticle#test_car_terminal_model",
  "historyId" : "235a32c800fa173486ee33835bd8fe06",
  "time" : {
    "start" : 1624007887372,
    "stop" : 1624007914197,
    "duration" : 26825
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <testcase.test_new_car.TestAuditArticle object at 0x0000021160477D30>\n\n    def test_car_terminal_model(self):\n    \tlogging.info(\"用户名1111\")\n>   \tself.basic_data_proxy.get_find_car_terminal_model()\n\ntestcase\\test_new_car.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nproxy\\basic_data_proxy.py:19: in get_find_car_terminal_model\n    self.basic_data_handle.click_car_terminal_info()\nhandle\\basic_data_handle.py:30: in click_car_terminal_info\n    self.basic_data_page.find_car_terminal_info().click()\npage\\basic_data_page.py:41: in find_car_terminal_info\n    return self.get_element(self.car_terminal_info)\nbase\\base_page.py:12: in get_element\n    element = wait.until(lambda x: x.find_element(*location))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"eae0b24a83adc6a27ad49702d954ee76\")>\nmethod = <function BasePage.get_element.<locals>.<lambda> at 0x0000021160489940>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "xunit_setup_class_fixture_TestAuditArticle",
    "time" : {
      "start" : 1624007887371,
      "stop" : 1624007887371,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <testcase.test_new_car.TestAuditArticle object at 0x0000021160477D30>\n\n    def test_car_terminal_model(self):\n    \tlogging.info(\"用户名1111\")\n>   \tself.basic_data_proxy.get_find_car_terminal_model()\n\ntestcase\\test_new_car.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nproxy\\basic_data_proxy.py:19: in get_find_car_terminal_model\n    self.basic_data_handle.click_car_terminal_info()\nhandle\\basic_data_handle.py:30: in click_car_terminal_info\n    self.basic_data_page.find_car_terminal_info().click()\npage\\basic_data_page.py:41: in find_car_terminal_info\n    return self.get_element(self.car_terminal_info)\nbase\\base_page.py:12: in get_element\n    element = wait.until(lambda x: x.find_element(*location))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"eae0b24a83adc6a27ad49702d954ee76\")>\nmethod = <function BasePage.get_element.<locals>.<lambda> at 0x0000021160489940>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "801d485c7dfaa8a2",
      "name" : "log",
      "source" : "801d485c7dfaa8a2.txt",
      "type" : "text/plain",
      "size" : 3211
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "xunit_setup_class_fixture_TestAuditArticle::0",
    "time" : {
      "start" : 1624007914395,
      "stop" : 1624007914395,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "run(order=3)"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_new_car"
  }, {
    "name" : "subSuite",
    "value" : "TestAuditArticle"
  }, {
    "name" : "host",
    "value" : "DESKTOP-GB30823"
  }, {
    "name" : "thread",
    "value" : "27504-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_new_car"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=3)" ]
  },
  "source" : "d2d66447d94c81ff.json",
  "parameterValues" : [ ]
}