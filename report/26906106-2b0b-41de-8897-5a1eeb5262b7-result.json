{"name": "test_car_terminal_model", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <testcase.test_new_car.TestAuditArticle object at 0x00000240145E2550>\n\n    def test_car_terminal_model(self):\n    \tlogging.info(\"用户名1111\")\n    \tcar_model = \"bitnei\" + ''.join(random.sample(string.digits + string.ascii_letters, 5))\n    \tcategory = \"车机\"\n    \tunit_name = \"潍柴动力股份有限公司\"\n    \timage=\"d://aa.img\"\n    \tself.basic_data_proxy.get_find_car_terminal_model()\n>   \tself.car_terminal_model_proxy.add_car_terminal_model(car_model,category,unit_name,image)\n\ntestcase\\test_new_car.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nproxy\\car_terminal_model_proxy.py:12: in add_car_terminal_model\n    self.car_terminal_model_handle.input_car_model(car_model)\nhandle\\car_terminal_model_handle.py:17: in input_car_model\n    self.input_text(self.car_terminal_model_page.find_car_model(),car_model)\npage\\car_terminal_model_page.py:36: in find_car_model\n    return self.get_element(self.car_model)\nbase\\base_page.py:12: in get_element\n    element = wait.until(lambda x: x.find_element(*location))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"58006b5a2767e78b3d43938528616876\")>\nmethod = <function BasePage.get_element.<locals>.<lambda> at 0x00000240145DD280>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException"}, "attachments": [{"name": "log", "source": "48585a71-9197-425c-be15-1fb6e5bcaa20-attachment.txt", "type": "text/plain"}], "start": 1624013964006, "stop": 1624013989490, "uuid": "337bb280-bf67-4e9c-b445-971279192254", "historyId": "235a32c800fa173486ee33835bd8fe06", "testCaseId": "2397e40ad91dbda5b8265e339564bf17", "fullName": "testcase.test_new_car.TestAuditArticle#test_car_terminal_model", "labels": [{"name": "tag", "value": "run(order=3)"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_new_car"}, {"name": "subSuite", "value": "TestAuditArticle"}, {"name": "host", "value": "DESKTOP-GB30823"}, {"name": "thread", "value": "48320-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_new_car"}]}