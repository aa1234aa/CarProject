{"name": "test_car_terminal_model", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=91.0.4472.106)", "trace": "self = <testcase.test_new_car.TestAuditArticle object at 0x0000023529350D00>\n\n    @allure.severity(allure.severity_level.BLOCKER)\n    def test_car_terminal_model(self):\n    \tlogging.info(\"用户名1111\")\n    \tcar_model = \"bitnei\" + ''.join(random.sample(string.digits + string.ascii_letters, 5))\n    \tcategory = \"车机\"\n    \tunit_name = \"潍柴动力股份有限公司\"\n    \timage= r\"d://time.img\"\n    \tself.basic_data_proxy.get_find_car_terminal_model()\n>   \tself.car_terminal_model_proxy.add_car_terminal_model(car_model,category,unit_name,image)\n\ntestcase\\test_new_car.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nproxy\\car_terminal_model_proxy.py:22: in add_car_terminal_model\n    self.car_terminal_model_handle.upload_scan_of_sport_file(image)\nhandle\\car_terminal_model_handle.py:64: in upload_scan_of_sport_file\n    self.input_text(self.car_terminal_model_page.find_scan_of_sport_file(),image)\nbase\\base_handle.py:10: in input_text\n    element.clear()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:95: in clear\n    self._execute(Command.CLEAR_ELEMENT)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023529370EE0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x772F87A4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x772F8774+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=91.0.4472.106)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementNotInteractableException"}, "steps": [{"name": "点击新增", "status": "passed", "start": 1624348841130, "stop": 1624348841629}, {"name": "输入终端型号", "status": "passed", "parameters": [{"name": "car_model", "value": "'bitneii5CGc'"}], "start": 1624348841630, "stop": 1624348842052}, {"name": "选择终端种类", "status": "passed", "parameters": [{"name": "category", "value": "'车机'"}], "start": 1624348842052, "stop": 1624348843222}, {"name": "查找支持加密芯片", "status": "passed", "start": 1624348843222, "stop": 1624348843299}, {"name": "查找终端生产企业", "status": "passed", "start": 1624348843299, "stop": 1624348843437}, {"name": "查找单位名称", "status": "passed", "parameters": [{"name": "unit_name", "value": "'潍柴动力股份有限公司'"}], "start": 1624348843437, "stop": 1624348843756}, {"name": "单位查询", "status": "passed", "start": 1624348843756, "stop": 1624348843851}, {"name": "选择单位", "status": "passed", "start": 1624348843851, "stop": 1624348843923}, {"name": "确定", "status": "passed", "start": 1624348843923, "stop": 1624348844030}, {"name": "终端检测报告扫描件", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=91.0.4472.106)\n\n", "trace": "  File \"d:\\pythonproject1\\carproject\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"D:\\pythonProject1\\CarProject\\handle\\car_terminal_model_handle.py\", line 64, in upload_scan_of_sport_file\n    self.input_text(self.car_terminal_model_page.find_scan_of_sport_file(),image)\n  File \"D:\\pythonProject1\\CarProject\\base\\base_handle.py\", line 10, in input_text\n    element.clear()\n  File \"d:\\pythonproject1\\carproject\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 95, in clear\n    self._execute(Command.CLEAR_ELEMENT)\n  File \"d:\\pythonproject1\\carproject\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"d:\\pythonproject1\\carproject\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"d:\\pythonproject1\\carproject\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "image", "value": "'d://time.img'"}], "start": 1624348844416, "stop": 1624348854490}], "attachments": [{"name": "log", "source": "a6856415-5c80-4165-bd7d-d0572fcc0224-attachment.txt", "type": "text/plain"}], "start": 1624348839650, "stop": 1624348854493, "uuid": "db65a8f2-c26f-4ba9-aa45-2f8192d8436f", "historyId": "235a32c800fa173486ee33835bd8fe06", "testCaseId": "2397e40ad91dbda5b8265e339564bf17", "fullName": "testcase.test_new_car.TestAuditArticle#test_car_terminal_model", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run(order=3)"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_new_car"}, {"name": "subSuite", "value": "TestAuditArticle"}, {"name": "host", "value": "DESKTOP-GB30823"}, {"name": "thread", "value": "12808-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_new_car"}]}